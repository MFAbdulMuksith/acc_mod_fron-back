# in This pipeline deploying containers task CmdLine@2 script bash commands

name: '$(name)'

trigger:
  branches:
    include:
      - main

resources:
  - repo: self

variables:
  
  # containerRegistry: 'docker_registry_service_connection'
  # dockerHubAccount: 'abdmuksith'
  # dockerAccessToken: "toxvkh55cgqoefdixja5gbefkrm2ebd5im6auvp6ixj6rrx_fake"
  # dockerCompose: './docker-compose.image.yaml'
  name: "$(pipelineName)$(environment)$(Date:yyMMdd)$(Rev:r)"
  pipelineName: "Accounts_Modules"
  frontImage: 'abdmuksith/frontImage_from_pipeline'
  backImage: 'abdmuksith/backImage_from_pipeline'
  azureAgent: 'ubuntu-latest'
  environment: 'production'
  selfHosted: 'production_ubuntu_server' 
  frontHostPort: '8080'
  backHostPort: '3001'
  frontDockerfile: 'frontend-acc/Dockerfile'
  backDockerfile: 'backend-acc/Dockerfile'
  frontURL: 'https://accounts.front.opsdemo.xyz/'
  backURL: 'https://accounts.back.opsdemo.xyz/'
  frontTag: 'front-$(Build.BuildId)'
  backTag: 'back-$(Build.BuildId)'
  frontContainer: 'acc_prod_frontend_container'
  backContainer: 'acc_Prod_backend_container'
  RunOptions: '-itd'
  frontcontPort: "80"
  backcontPort: "3001"

##########################################################
# Azure DevOps Build and Push to Docker Hub registory CI #
##########################################################

stages:
  - stage: BuildAndPush
    displayName: 'Build and Push Docker Images  on Azure runners Agent'
    jobs:
      - job: BuildAndPush
        displayName: 'Build and Push'
        pool:
          vmImage: $(azureAgent)
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'docker_hub_registry'
              repository: '$(backImage)'
              command: 'buildAndPush'
              Dockerfile: '$(backDockerfile)'
              tags: '$(backTag)'

          - task: Docker@2
            inputs:
              containerRegistry: 'docker_hub_registry'
              repository: '$(frontImage)'
              command: 'buildAndPush'
              Dockerfile: '$(frontDockerfile)'
              tags: '$(frontTag)'

########################
# Self-hosted Agent CD #
########################

  - stage: PullAndRunDockerImages
    displayName: 'Pull and Run Docker Images on Self-hosted Agent'
    pool:
      name: $(selfHosted)
    jobs:

###########
# backend #
###########


      - deployment: DeployBackend
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: CmdLine@2
                  inputs:
                    script: |
                      echo '### Starting CD process'  # Print a message indicating the start of the CD process
                      # Stop the existing backend container
                      docker stop $(backContainer)
                      # Remove the existing backend container
                      docker rm $(backContainer)
                      # Pull the latest version of the backend image from the repository
                      docker pull $(backImage):$(backTag)
                      # Run the updated backend container with specified options and configurations
                      docker run $(RunOptions) --name $(backContainer) -p $(backHostPort):$(backcontPort) $(backImage):$(backTag)
                      echo '### Backend container started:'  # Print a message indicating the backend container has started
                      # Print a message to check the URL of the Docker Backend Container Domain
                      echo "### Check Docker Backend Container Domain URL $(backURL)"

############
# Frontend #
############


      - deployment: DeployFrontend
        dependsOn: DeployBackend
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: CmdLine@2
                  inputs:
                    script: |
                      docker stop $(frontContainer)  # Stop the existing frontend container
                      docker rm -f $(frontContainer)  # Forcefully remove the existing frontend container
                      docker pull $(frontImage):$(frontTag)  # Pull the latest version of the frontend image from the repository
                      docker run $(RunOptions) --name $(frontContainer) -p $(frontHostPort):$(frontcontPort) $(frontImage):$(frontTag)  # Run the updated frontend container with specified options and configurations
                      echo '### Frontend container started:'  # Print a message indicating the frontend container has started
                      # Print a message indicating the currently available and running containers
                      echo '### Currently available and running containers'
                      docker ps -a
                      # Remove all unused images to free up disk space
                      echo '### Removing all unused images'
                      docker image prune -a -f
                      # List all available docker images
                      echo '### Listing all available docker images'
                      docker images -a
                      # Print a message to check the URL of the Docker Frontend Container Domain
                      echo '### Check Docker Frontend Container Domain URL $(frontURL)'
                      echo '### Done CD process'  # Print a message indicating the completion of the CD process
